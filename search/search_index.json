{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sioux's Notes","text":"<p>Welcome to my personal notes on various programming-related topics. I have big plans for this website, though I'm not sure if I have the time to match;</p>"},{"location":"#site-purpose","title":"Site Purpose","text":"<p>I created this website to:</p> <ol> <li> <p>Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forgot how I resolved it. Or when I revisit a tool and forgot how it works. Thus, I plan to record what I learn here while it is fresh in my memory.</p> </li> <li> <p>Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory.</p> </li> <li> <p>Build skills related to software development, including Git, CI/CD, iterative development, and documentation.</p> </li> <li> <p>Inspire and guide others to take advantage of the powerful capabilities of popular coding-related software.</p> </li> </ol>"},{"location":"#site-contents","title":"Site Contents","text":"<ul> <li><code>Guide</code>: How I write the notes of this website</li> <li><code>Articles</code>: My main study and work notes</li> <li><code>Blog</code>: My blog article</li> <li><code>About</code>: About me</li> </ul>"},{"location":"#site-guides","title":"Site Guides","text":"<p>This site is building by mkdocs. For full documentation visit mkdocs.org.</p> <p>Please refer to these Guides how I wrote these articles.</p>"},{"location":"about/about/","title":"About Me","text":"<p>Here are some ideas to get you started:</p> <ul> <li>\ud83d\udd2d I\u2019m currently working on this Github readme page</li> <li>\ud83c\udf31 I\u2019m currently learning autopilot development</li> <li>\ud83d\udc6f I\u2019m looking to collaborate on ...</li> <li>\ud83e\udd14 I\u2019m looking for help with ...</li> <li>\ud83d\udcac Ask me about python/C++</li> <li>\ud83d\udceb How to reach me: ...</li> <li>\ud83d\ude04 Pronouns: ...</li> <li>\u26a1 Fun fact: ...</li> </ul>"},{"location":"articles/test/","title":"Test","text":""},{"location":"blog/","title":"My Blog","text":""},{"location":"blog/2024/05/15/markdown-guide/","title":"Markdown Guide","text":"<p>This is a template that how to writing markdown using markdown_extensions</p> <ul> <li>markdown-callouts:     Start with: <code>TIP:</code>, <code>&gt; NOTE:</code> <pre><code>markdown_extensions:\n- callouts:\n    strip_period: false\n</code></pre></li> <li> <p>admonitions     Start with: <code>!!! tip XXX-Topic</code>, <code>!!! note:</code> <pre><code>markdown_extensions:\n- admonition\n</code></pre></p> </li> <li> <p>pymdown-extensions</p> </li> </ul>"},{"location":"blog/2024/05/15/markdown-guide/#topic1","title":"Topic1","text":"<p>tip2 this is a note that xxxxxx</p> <p>Learn more</p> <p>See the documentation on supported types.</p> <p>Changed in version 0.15.</p> <p> Linking to any Markdown heading used to be the default, but now opt-in is required.</p> <p>Resources on YAML.</p> <p> YAML can sometimes be a bit tricky, particularly on indentation. Here are some resources that other users found useful to better understand YAML's peculiarities.</p> <ul> <li>YAML idiosyncrasies</li> <li>YAML multiline</li> </ul> <p>Warning</p> <p>Since mkdocstrings 0.19, the YAML <code>rendering</code> key is merged into the <code>options</code> key.</p>"},{"location":"blog/2024/05/15/markdown-guide/#mkdocstrings-usage","title":"mkdocstrings usage","text":"Performance Example - Pydantic vs. dedicated code <p>(This example requires Python 3.9+)</p> <pre><code>from typing import Annotated, Dict, List, Literal, Tuple\n\nfrom annotated_types import Gt\n\nfrom pydantic import BaseModel\n\n\nclass Fruit(BaseModel):\n    name: str  # (1)!\n    color: Literal[\"red\", \"green\"]  # (2)!\n    weight: Annotated[float, Gt(0)]  # (3)!\n    bazam: Dict[str, List[Tuple[int, bool, float]]]  # (4)!\n\n\nprint(\n    Fruit(\n        name=\"Apple\",\n        color=\"red\",\n        weight=4.2,\n        bazam={\"foobar\": [(1, True, 0.1)]},\n    )\n)\n# &gt; name='Apple' color='red' weight=4.2 bazam={'foobar': [(1, True, 0.1)]}\n</code></pre> Performance Example - Pydantic vs. dedicated code <p>In general, dedicated code should be much faster that a general-purpose validator, but in this example Pydantic is &gt;300% faster than dedicated code when parsing JSON and validating URLs.</p> <pre><code>import json\nimport timeit\nfrom urllib.parse import urlparse\n\nimport requests\n\nfrom pydantic import HttpUrl, TypeAdapter\n\nreps = 7\nnumber = 100\nr = requests.get(\"https://api.github.com/emojis\")\nr.raise_for_status()\nemojis_json = r.content\n\n\ndef emojis_pure_python(raw_data):\n    data = json.loads(raw_data)\n    output = {}\n    for key, value in data.items():\n        assert isinstance(key, str)\n        url = urlparse(value)\n        assert url.scheme in (\"https\", \"http\")\n        output[key] = url\n\n\nemojis_pure_python_times = timeit.repeat(\n    \"emojis_pure_python(emojis_json)\",\n    globals={\n        \"emojis_pure_python\": emojis_pure_python,\n        \"emojis_json\": emojis_json,\n    },\n    repeat=reps,\n    number=number,\n)\nprint(f\"pure python: {min(emojis_pure_python_times) / number * 1000:0.2f}ms\")\n# &gt; pure python: 5.32ms\n\ntype_adapter = TypeAdapter(dict[str, HttpUrl])\nemojis_pydantic_times = timeit.repeat(\n    \"type_adapter.validate_json(emojis_json)\",\n    globals={\n        \"type_adapter\": type_adapter,\n        \"HttpUrl\": HttpUrl,\n        \"emojis_json\": emojis_json,\n    },\n    repeat=reps,\n    number=number,\n)\nprint(f\"pydantic: {min(emojis_pydantic_times) / number * 1000:0.2f}ms\")\n# &gt; pydantic: 1.54ms\n\nprint(\n    f\"Pydantic {min(emojis_pure_python_times) / min(emojis_pydantic_times):0.2f}x faster\"\n)\n# &gt; Pydantic 3.45x faster\n</code></pre> <p>Example with the Python handler</p> <p>A comments here if you need.</p> docs/my_page.mdmkdocs.ymlsrc/my_package/my_module.pyResult <pre><code># Documentation for `MyClass`\n\n::: my_package.my_module.MyClass\n    handler: python\n    options:\n      members:\n        - method_a\n        - method_b\n      show_root_heading: false\n      show_source: false\n</code></pre> <pre><code>nav:\n  - \"My page\": my_page.md\n</code></pre> <pre><code>class MyClass:\n    \"\"\"Print print print!\"\"\"\n\n    def method_a(self):\n        \"\"\"Print A!\"\"\"\n        print(\"A!\")\n\n    def method_b(self):\n        \"\"\"Print B!\"\"\"\n        print(\"B!\")\n\n    def method_c(self):\n        \"\"\"Print C!\"\"\"\n        print(\"C!\")\n</code></pre> <p></p> <p>It is also possible to integrate a mkdocstrings identifier into a Markdown header:</p> <p>Example</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    enabled: !ENV [ENABLE_MKDOCSTRINGS, true]\n    custom_templates: templates\n    default_handler: python\n    handlers:\n      python:\n        options:\n          show_source: false\n</code></pre> <p>The handlers global configuration can then be overridden by local configurations:</p> docs/some_page.md<pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: true\n</code></pre> MarkdownHTML Result <pre><code>With a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n</code></pre> <pre><code>&lt;p&gt;With a custom title:\n&lt;a href=\"https://example.com/page1#full.path.object1\"&gt;&lt;code&gt;Object 1&lt;/code&gt;&lt;/a&gt;&lt;p&gt;\n&lt;p&gt;With the identifier as title:\n&lt;a href=\"https://example.com/page2#full.path.object2\"&gt;full.path.object2&lt;/a&gt;&lt;/p&gt;\n</code></pre>"},{"location":"blog/2024/05/15/markdown-guide/#documentation-for-myclass","title":"Documentation for <code>MyClass</code>","text":"<p>Print print print!</p>"},{"location":"blog/2024/05/15/markdown-guide/#mkdocstrings.my_module.MyClass.method_a","title":"<code> method_a(self) </code>","text":"<p>Print A!</p>"},{"location":"blog/2024/05/15/markdown-guide/#mkdocstrings.my_module.MyClass.method_b","title":"<code> method_b(self) </code>","text":"<p>Print B!</p>"},{"location":"blog/2024/01/31/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"blog/2024/01/01/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"guide/admonition/","title":"Admonition","text":"<p>Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.</p>"},{"location":"guide/admonition/#installation","title":"Installation","text":"<p>Add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n</code></pre>"},{"location":"guide/admonition/#usage","title":"Usage","text":"<p>Admonition blocks follow a simple syntax: every block is started with <code>!!!</code>, followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces.</p> <p>Example:</p> <pre><code>!!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"guide/admonition/#changing-the-title","title":"Changing the title","text":"<p>By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier.</p> <p>Example:</p> <pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"guide/admonition/#removing-the-title","title":"Removing the title","text":"<p>Similar to setting a custom title, the icon and title can be omitted by providing an empty string after the type qualifier:</p> <p>Example:</p> <pre><code>!!! note \"\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"guide/admonition/#embedded-code-blocks","title":"Embedded code blocks","text":"<p>Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those.</p> <p>However, the PyMdown Extensions package adds an extension called SuperFences, which makes it possible to nest code blocks within other blocks, respectively Admonition blocks.</p> <p>Example:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>SELECT\n  Employees.EmployeeID,\n  Employees.Name,\n  Employees.Salary,\n  Manager.Name AS Manager\nFROM\n  Employees\nLEFT JOIN\n  Employees AS Manager\nON\n  Employees.ManagerID = Manager.EmployeeID\nWHERE\n  Employees.EmployeeID = '087652';\n</code></pre> <p>Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.</p>"},{"location":"guide/admonition/#collapsible-blocks","title":"Collapsible blocks","text":"<p>The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature.</p> <p>Example:</p> <pre><code>??? note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> Phasellus posuere in sem ut cursus <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>By adding a <code>+</code> sign directly after the start marker, blocks can be rendered open by default.</p>"},{"location":"guide/admonition/#types","title":"Types","text":"<p>Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is <code>note</code>.</p>"},{"location":"guide/admonition/#note","title":"Note","text":"<p>Example:</p> <pre><code>!!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>note</code></li> <li><code>seealso</code></li> </ul>"},{"location":"guide/admonition/#abstract","title":"Abstract","text":"<p>Example:</p> <pre><code>!!! abstract\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>abstract</code></li> <li><code>summary</code></li> <li><code>tldr</code></li> </ul>"},{"location":"guide/admonition/#info","title":"Info","text":"<p>Example:</p> <pre><code>!!! info\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>info</code></li> <li><code>todo</code></li> </ul>"},{"location":"guide/admonition/#tip","title":"Tip","text":"<p>Example:</p> <pre><code>!!! tip\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>tip</code></li> <li><code>hint</code></li> <li><code>important</code></li> </ul>"},{"location":"guide/admonition/#success","title":"Success","text":"<p>Example:</p> <pre><code>!!! success\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>success</code></li> <li><code>check</code></li> <li><code>done</code></li> </ul>"},{"location":"guide/admonition/#question","title":"Question","text":"<p>Example:</p> <pre><code>!!! question\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>question</code></li> <li><code>help</code></li> <li><code>faq</code></li> </ul>"},{"location":"guide/admonition/#warning","title":"Warning","text":"<p>Example:</p> <pre><code>!!! warning\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>warning</code></li> <li><code>caution</code></li> <li><code>attention</code></li> </ul>"},{"location":"guide/admonition/#failure","title":"Failure","text":"<p>Example:</p> <pre><code>!!! failure\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>failure</code></li> <li><code>fail</code></li> <li><code>missing</code></li> </ul>"},{"location":"guide/admonition/#danger","title":"Danger","text":"<p>Example:</p> <pre><code>!!! danger\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>danger</code></li> <li><code>error</code></li> </ul>"},{"location":"guide/admonition/#bug","title":"Bug","text":"<p>Example:</p> <pre><code>!!! bug\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>bug</code></li> </ul>"},{"location":"guide/admonition/#example","title":"Example","text":"<p>Example:</p> <pre><code>!!! example\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>example</code></li> <li><code>snippet</code></li> </ul>"},{"location":"guide/admonition/#quote","title":"Quote","text":"<p>Example:</p> <pre><code>!!! quote\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Qualifiers:</p> <ul> <li><code>quote</code></li> <li><code>cite</code></li> </ul>"},{"location":"guide/blog/","title":"Blog","text":""},{"location":"guide/codehilite/","title":"CodeHilite","text":"<p>CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file.</p> <p>Syntax highlighting not working?</p> <p>Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.</p>"},{"location":"guide/codehilite/#installation","title":"Installation","text":"<p>CodeHilite parses code blocks and wraps them in <code>pre</code> tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages, CodeHilite will also highlight the code block. Pygments can be installed with the following command:</p> <pre><code>pip install pygments\n</code></pre> <p>To enable CodeHilite, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - codehilite\n</code></pre>"},{"location":"guide/codehilite/#usage","title":"Usage","text":""},{"location":"guide/codehilite/#specifying-the-language","title":"Specifying the language","text":"<p>The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.</p>"},{"location":"guide/codehilite/#via-markdown-syntax-recommended","title":"via Markdown syntax recommended","text":"<p>In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block.</p> <p>Example:</p> <pre><code>``` python\nimport tensorflow as tf\n```\n</code></pre> <p>Result:</p> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"guide/codehilite/#via-shebang","title":"via Shebang","text":"<p>Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks.</p> <p>Example:</p> <pre><code>    #!/usr/bin/python\n    import tensorflow as tf\n</code></pre> <p>Result:</p> <pre><code>#!/usr/bin/python\nimport tensorflow as tf\n</code></pre>"},{"location":"guide/codehilite/#via-three-colons","title":"via three colons","text":"<p>If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks.</p> <p>Example:</p> <pre><code>    :::python\n    import tensorflow as tf\n</code></pre> <p>Result:</p> <pre><code>:::python\nimport tensorflow as tf\n</code></pre>"},{"location":"guide/codehilite/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added by enabling the <code>linenums</code> flag in your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - codehilite:\n      linenums: true\n</code></pre> <p>Example:</p> <pre><code>``` python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <p>Result:</p> <pre><code>#!python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"guide/codehilite/#grouping-code-blocks","title":"Grouping code blocks","text":"<p>The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings.</p> <p>Example:</p> <pre><code>``` bash tab=\"Bash\"\n#!/bin/bash\n\necho \"Hello world!\"\n```\n\n``` c tab=\"C\"\n#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n}\n```\n\n``` c++ tab=\"C++\"\n#include &lt;iostream&gt;\n\nint main() {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n```\n\n``` c# tab=\"C#\"\nusing System;\n\nclass Program {\n  static void Main(string[] args) {\n    Console.WriteLine(\"Hello world!\");\n  }\n}\n```\n</code></pre> <p>Result:</p> <p>``` bash tab=\"Bash\"</p>"},{"location":"guide/codehilite/#binbash","title":"!/bin/bash","text":"<p>echo \"Hello world!\" <pre><code>``` c tab=\"C\"\n#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n}\n</code></pre></p> <p>``` c++ tab=\"C++\"</p>"},{"location":"guide/codehilite/#include","title":"include  <p>int main() {   std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;   return 0; } <pre><code>``` c# tab=\"C#\"\nusing System;\n\nclass Program {\n  static void Main(string[] args) {\n    Console.WriteLine(\"Hello world!\");\n  }\n}\n</code></pre></p>","text":""},{"location":"guide/codehilite/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language identifier. Line counts start at 1.</p> <p>Example:</p> <pre><code>``` python hl_lines=\"3 4\"\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <p>Result:</p> <pre><code>#!python hl_lines=\"3 4\"\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"guide/codehilite/#supported-languages-excerpt","title":"Supported languages excerpt","text":"<p>CodeHilite uses Pygments, a generic syntax highlighter with support for over 300 languages, so the following list of examples is just an excerpt.</p>"},{"location":"guide/codehilite/#bash","title":"Bash","text":"<pre><code>#!/bin/bash\n\nfor OPT in \"$@\"\ndo\n  case \"$OPT\" in\n    '-f' )  canonicalize=1 ;;\n    '-n' )  switchlf=\"-n\" ;;\n  esac\ndone\n\n# readlink -f\nfunction __readlink_f {\n  target=\"$1\"\n  while test -n \"$target\"; do\n    filepath=\"$target\"\n    cd `dirname \"$filepath\"`\n    target=`readlink \"$filepath\"`\n  done\n  /bin/echo $switchlf `pwd -P`/`basename \"$filepath\"`\n}\n\nif [ ! \"$canonicalize\" ]; then\n  readlink $switchlf \"$@\"\nelse\n  for file in \"$@\"\n  do\n    case \"$file\" in\n      -* )  ;;\n      *  )  __readlink_f \"$file\" ;;\n    esac\n    done\nfi\n\nexit $?\n</code></pre>"},{"location":"guide/codehilite/#c","title":"C","text":"<pre><code>extern size_t\npb_varint_scan(const uint8_t data[], size_t left) {\n  assert(data &amp;&amp; left);\n  left = left &gt; 10 ? 10 : left;\n\n#ifdef __SSE2__\n\n  /* Mapping: remaining bytes ==&gt; bitmask */\n  static const int mask_map[] = {\n    0x0000, 0x0001, 0x0003, 0x0007,\n    0x000F, 0x001F, 0x003F, 0x007F,\n    0x00FF, 0x01FF, 0x03FF\n  };\n\n  /* Load buffer into 128-bit integer and create high-bit mask */\n  __m128i temp = _mm_loadu_si128((const __m128i *)data);\n  __m128i high = _mm_set1_epi8(0x80);\n\n  /* Intersect and extract mask with high-bits set */\n  int mask = _mm_movemask_epi8(_mm_and_si128(temp, high));\n  mask = (mask &amp; mask_map[left]) ^ mask_map[left];\n\n  /* Count trailing zeroes */\n  return mask ? __builtin_ctz(mask) + 1 : 0;\n\n#else\n\n  /* Linear scan */\n  size_t size = 0;\n  while (data[size++] &amp; 0x80)\n    if (!--left)\n      return 0;\n  return size;\n\n#endif /* __SSE2__ */\n\n}\n</code></pre>"},{"location":"guide/codehilite/#c_1","title":"C++","text":"<pre><code>Extension::\nExtension(const Descriptor *descriptor, const Descriptor *scope) :\n    descriptor_(descriptor),\n    scope_(scope) {\n\n  /* Extract full name for signature */\n  variables_[\"signature\"] = descriptor_-&gt;full_name();\n\n  /* Prepare message symbol */\n  variables_[\"message\"] = StringReplace(\n    variables_[\"signature\"], \".\", \"_\", true);\n  LowerString(&amp;(variables_[\"message\"]));\n\n  /* Suffix scope to identifiers, if given */\n  string suffix (\"\");\n  if (scope_) {\n    suffix = scope_-&gt;full_name();\n\n    /* Check if the base and extension types are in the same package */\n    if (!scope_-&gt;file()-&gt;package().compare(descriptor_-&gt;file()-&gt;package()))\n      suffix = StripPrefixString(suffix,\n        scope_-&gt;file()-&gt;package() + \".\");\n\n    /* Append to signature */\n    variables_[\"signature\"] += \".[\" + suffix +\"]\";\n    suffix = \"_\" + suffix;\n  }\n\n  /* Prepare extension symbol */\n  variables_[\"extension\"] = StringReplace(\n    suffix, \".\", \"_\", true);\n  LowerString(&amp;(variables_[\"extension\"]));\n}\n</code></pre>"},{"location":"guide/codehilite/#c_2","title":"C#","text":"<pre><code>public static void Send(\n    Socket socket, byte[] buffer, int offset, int size, int timeout) {\n  int startTickCount = Environment.TickCount;\n  int sent = 0;\n  do {\n    if (Environment.TickCount &gt; startTickCount + timeout)\n      throw new Exception(\"Timeout.\");\n    try {\n      sent += socket.Send(buffer, offset + sent,\n        size - sent, SocketFlags.None);\n    } catch (SocketException ex) {\n      if (ex.SocketErrorCode == SocketError.WouldBlock ||\n          ex.SocketErrorCode == SocketError.IOPending ||\n          ex.SocketErrorCode == SocketError.NoBufferSpaceAvailable) {\n        /* Socket buffer is probably full, wait and try again */\n        Thread.Sleep(30);\n      } else {\n        throw ex;\n      }\n    }\n  } while (sent &lt; size);\n}\n</code></pre>"},{"location":"guide/codehilite/#clojure","title":"Clojure","text":"<pre><code>(clojure-version)\n\n(defn partition-when\n  [f]\n  (fn [rf]\n    (let [a (java.util.ArrayList.)\n          fval (volatile! false)]\n      (fn\n        ([] (rf))\n        ([result]\n           (let [result (if (.isEmpty a)\n                          result\n                          (let [v (vec (.toArray a))]\n                            ;; Clear first\n                            (.clear a)\n                            (unreduced (rf result v))))]\n             (rf result)))\n        ([result input]\n            (if-not (and (f input)  @fval)\n               (do\n                 (vreset! fval true)\n                 (.add a input)\n                 result)\n               (let [v (vec (.toArray a))]\n                 (.clear a)\n                 (let [ret (rf result v)]\n                   (when-not (reduced? ret)\n                     (.add a input))\n                   ret))))))))\n\n\n(into [] (partition-when\n          #(.startsWith % \"&gt;&gt;\"))\n          [\"1d\" \"33\" \"&gt;&gt; 1\" \"&gt;&gt; 2\" \"22\" \"&gt;&gt; 3\"])\n</code></pre>"},{"location":"guide/codehilite/#diff","title":"Diff","text":"<pre><code>Index: grunt.js\n===================================================================\n--- grunt.js    (revision 31200)\n+++ grunt.js    (working copy)\n@@ -12,6 +12,7 @@\n\n module.exports = function (grunt) {\n\n+  console.log('hello world');\n   // Project configuration.\n   grunt.initConfig({\n     lint: {\n@@ -19,10 +20,6 @@\n         'packages/services.web/{!(test)/**/,}*.js',\n         'packages/error/**/*.js'\n       ],\n-      scripts: [\n-        'grunt.js',\n-        'db/**/*.js'\n-      ],\n       browser: [\n         'packages/web/server.js',\n         'packages/web/server/**/*.js',\n</code></pre>"},{"location":"guide/codehilite/#docker","title":"Docker","text":"<pre><code>FROM ubuntu\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\nRUN apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox\nRUN mkdir ~/.vnc\n\n# Setup a password\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n\n# Autostart firefox (might not be the best way, but it does the trick)\nRUN bash -c 'echo \"firefox\" &gt;&gt; /.bashrc'\n\nEXPOSE 5900\nCMD [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]\n</code></pre>"},{"location":"guide/codehilite/#elixir","title":"Elixir","text":"<pre><code>require Logger\n\ndef accept(port) do\n  {:ok, socket} = :gen_tcp.listen(port,\n                    [:binary, packet: :line, active: false, reuseaddr: true])\n  Logger.info \"Accepting connections on port #{port}\"\n  loop_acceptor(socket)\nend\n\ndefp loop_acceptor(socket) do\n  {:ok, client} = :gen_tcp.accept(socket)\n  serve(client)\n  loop_acceptor(socket)\nend\n\ndefp serve(socket) do\n  socket\n  |&gt; read_line()\n  |&gt; write_line(socket)\n\n  serve(socket)\nend\n\ndefp read_line(socket) do\n  {:ok, data} = :gen_tcp.recv(socket, 0)\n  data\nend\n\ndefp write_line(line, socket) do\n  :gen_tcp.send(socket, line)\nend\n</code></pre>"},{"location":"guide/codehilite/#erlang","title":"Erlang","text":"<pre><code>circular(Defs) -&gt;\n  [ { { Type, Base }, Fields } ||\n    { { Type, Base }, Fields } &lt;- Defs, Type == msg, circular(Base, Defs) ].\n\ncircular(Base, Defs) -&gt;\n  Fields = proplists:get_value({ msg, Base }, Defs),\n  circular(Defs, Fields, [Base]).\n\ncircular(_Defs, [], _Path) -&gt;\n  false;\ncircular(Defs, [Field | Fields], Path) -&gt;\n  case Field#field.type of\n    { msg, Type } -&gt;\n      case lists:member(Type, Path) of\n        false -&gt;\n          Children = proplists:get_value({ msg, Type }, Defs),\n          case circular(Defs, Children, [Type | Path]) of\n            false -&gt; circular(Defs, Fields, Path);\n            true  -&gt; true\n          end;\n        true -&gt;\n          Type == lists:last(Path) andalso\n            (length(Path) == 1 orelse not is_tree(Path))\n      end;\n    _ -&gt;\n      circular(Defs, Fields, Path)\n  end.\n</code></pre>"},{"location":"guide/codehilite/#f","title":"F#","text":"<pre><code>/// Asynchronously download retangles from the server\n/// and decode the JSON format to F# Rectangle record\nlet [&lt;Js&gt;] getRectangles () : Async&lt;Rectangle[]&gt; = async {\n  let req = XMLHttpRequest()\n  req.Open(\"POST\", \"/get\", true)\n  let! resp = req.AsyncSend()\n  return JSON.parse(resp) }\n\n/// Repeatedly update rectangles after 0.5 sec\nlet [&lt;Js&gt;] updateLoop () = async {\n  while true do\n    do! Async.Sleep(500)\n    let! rects = getRectangles()\n    cleanRectangles()\n    rects |&gt; Array.iter createRectangle }\n</code></pre>"},{"location":"guide/codehilite/#go","title":"Go","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc counter(id int, channel chan int, closer bool) {\n  for i := 0; i &lt; 10000000; i++ {\n    fmt.Println(\"process\", id,\" send\", i)\n    channel &lt;- 1\n  }\n  if closer { close(channel ) }\n}\n\nfunc main() {\n  channel := make(chan int)\n  go counter(1, channel, false)\n  go counter(2, channel, true)\n\n  x := 0\n\n  // receiving data from channel\n  for i := range channel {\n    fmt.Println(\"receiving\")\n    x += i\n  }\n\n  fmt.Println(x)\n}\n</code></pre>"},{"location":"guide/codehilite/#html","title":"HTML","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html class=\"no-js\" lang=\"\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;HTML5 Boilerplate&lt;/title&gt;\n    &lt;meta name=\"description\" content=\"\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n    &lt;link rel=\"apple-touch-icon\" href=\"apple-touch-icon.png\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/normalize.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/main.css\"&gt;\n    &lt;script src=\"js/vendor/modernizr-2.8.3.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hello world! This is HTML5 Boilerplate.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"guide/codehilite/#java","title":"Java","text":"<pre><code>import java.util.LinkedList;\nimport java.lang.reflect.Array;\n\npublic class UnsortedHashSet&lt;E&gt; {\n\n  private static final double LOAD_FACTOR_LIMIT = 0.7;\n\n  private int size;\n  private LinkedList&lt;E&gt;[] con;\n\n  public UnsortedHashSet() {\n    con  = (LinkedList&lt;E&gt;[])(new LinkedList[10]);\n  }\n\n  public boolean add(E obj) {\n    int oldSize = size;\n    int index = Math.abs(obj.hashCode()) % con.length;\n    if (con[index] == null)\n      con[index] = new LinkedList&lt;E&gt;();\n    if (!con[index].contains(obj)) {\n      con[index].add(obj);\n      size++;\n    }\n    if (1.0 * size / con.length &gt; LOAD_FACTOR_LIMIT)\n      resize();\n    return oldSize != size;\n  }\n\n  private void resize() {\n    UnsortedHashSet&lt;E&gt; temp = new UnsortedHashSet&lt;E&gt;();\n    temp.con = (LinkedList&lt;E&gt;[])(new LinkedList[con.length * 2 + 1]);\n    for (int i = 0; i &lt; con.length; i++) {\n      if (con[i] != null)\n        for (E e : con[i])\n          temp.add(e);\n    }\n    con = temp.con;\n  }\n\n  public int size() {\n    return size;\n  }\n}\n</code></pre>"},{"location":"guide/codehilite/#javascript","title":"JavaScript","text":"<pre><code>var Math = require('lib/math');\n\nvar _extends = function (target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n};\n\nvar e = exports.e = 2.71828182846;\nexports['default'] = function (x) {\n  return Math.exp(x);\n};\n\nmodule.exports = _extends(exports['default'], exports);\n</code></pre>"},{"location":"guide/codehilite/#json","title":"JSON","text":"<pre><code>{\n  \"name\": \"mkdocs-material\",\n  \"version\": \"0.2.4\",\n  \"description\": \"A Material Design theme for MkDocs\",\n  \"homepage\": \"http://squidfunk.github.io/mkdocs-material/\",\n  \"authors\": [\n    \"squidfunk &lt;martin.donath@squidfunk.com&gt;\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"Gulpfile.js\",\n  \"scripts\": {\n    \"start\": \"./node_modules/.bin/gulp watch --mkdocs\",\n    \"build\": \"./node_modules/.bin/gulp build --production\"\n  }\n  ...\n}\n</code></pre>"},{"location":"guide/codehilite/#julia","title":"Julia","text":"<pre><code>using MXNet\n\nmlp = @mx.chain mx.Variable(:data)             =&gt;\n  mx.FullyConnected(name=:fc1, num_hidden=128) =&gt;\n  mx.Activation(name=:relu1, act_type=:relu)   =&gt;\n  mx.FullyConnected(name=:fc2, num_hidden=64)  =&gt;\n  mx.Activation(name=:relu2, act_type=:relu)   =&gt;\n  mx.FullyConnected(name=:fc3, num_hidden=10)  =&gt;\n  mx.SoftmaxOutput(name=:softmax)\n\n# data provider\nbatch_size = 100\ninclude(Pkg.dir(\"MXNet\", \"examples\", \"mnist\", \"mnist-data.jl\"))\ntrain_provider, eval_provider = get_mnist_providers(batch_size)\n\n# setup model\nmodel = mx.FeedForward(mlp, context=mx.cpu())\n\n# optimization algorithm\noptimizer = mx.SGD(lr=0.1, momentum=0.9)\n\n# fit parameters\nmx.fit(model, optimizer, train_provider, n_epoch=20, eval_data=eval_provider)\n</code></pre>"},{"location":"guide/codehilite/#lua","title":"Lua","text":"<pre><code>local ffi = require(\"ffi\")\n\nffi.cdef[[\n  void Sleep(int ms);\n  int poll(struct pollfd *fds, unsigned long nfds, int timeout);\n]]\n\nlocal sleep\nif ffi.os == \"Windows\" then\n  function sleep(s)\n    ffi.C.Sleep(s*1000)\n  end\nelse\n  function sleep(s)\n    ffi.C.poll(nil, 0, s * 1000)\n  end\nend\n\nfor i = 1,160 do\n  io.write(\".\"); io.flush()\n  sleep(0.01)\nend\nio.write(\"\\n\")\n</code></pre>"},{"location":"guide/codehilite/#mysql","title":"MySQL","text":"<pre><code>SELECT\n  Employees.EmployeeID,\n  Employees.Name,\n  Employees.Salary,\n  Manager.Name AS Manager\nFROM\n  Employees\nLEFT JOIN\n  Employees AS Manager\nON\n  Employees.ManagerID = Manager.EmployeeID\nWHERE\n  Employees.EmployeeID = '087652';\n</code></pre>"},{"location":"guide/codehilite/#php","title":"PHP","text":"<pre><code>&lt;?php\n\n// src/AppBundle/Controller/LuckyController.php\nnamespace AppBundle\\Controller;\n\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass LuckyController {\n\n  /**\n   * @Route(\"/lucky/number\")\n   */\n  public function numberAction() {\n    $number = mt_rand(0, 100);\n\n    return new Response(\n      '&lt;html&gt;&lt;body&gt;Lucky number: '.$number.'&lt;/body&gt;&lt;/html&gt;'\n    );\n  }\n}\n</code></pre>"},{"location":"guide/codehilite/#protocol-buffers","title":"Protocol Buffers","text":"<pre><code>syntax = \"proto2\";\n\npackage caffe;\n\n// Specifies the shape (dimensions) of a Blob.\nmessage BlobShape {\n  repeated int64 dim = 1 [packed = true];\n}\n\nmessage BlobProto {\n  optional BlobShape shape = 7;\n  repeated float data = 5 [packed = true];\n  repeated float diff = 6 [packed = true];\n\n  // 4D dimensions -- deprecated.  Use \"shape\" instead.\n  optional int32 num = 1 [default = 0];\n  optional int32 channels = 2 [default = 0];\n  optional int32 height = 3 [default = 0];\n  optional int32 width = 4 [default = 0];\n}\n</code></pre>"},{"location":"guide/codehilite/#python","title":"Python","text":"<pre><code>\"\"\"\n  A very simple MNIST classifier.\n  See extensive documentation at\n  http://tensorflow.org/tutorials/mnist/beginners/index.md\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n# Import data\nfrom tensorflow.examples.tutorials.mnist import input_data\n\nimport tensorflow as tf\n\nflags = tf.app.flags\nFLAGS = flags.FLAGS\nflags.DEFINE_string('data_dir', '/tmp/data/', 'Directory for storing data')\n\nmnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\n\nsess = tf.InteractiveSession()\n\n# Create the model\nx = tf.placeholder(tf.float32, [None, 784])\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n</code></pre>"},{"location":"guide/codehilite/#ruby","title":"Ruby","text":"<pre><code>require 'finity/event'\nrequire 'finity/machine'\nrequire 'finity/state'\nrequire 'finity/transition'\nrequire 'finity/version'\n\nmodule Finity\n  class InvalidCallback &lt; StandardError; end\n  class MissingCallback &lt; StandardError; end\n  class InvalidState    &lt; StandardError; end\n\n  # Class methods to be injected into the including class upon inclusion.\n  module ClassMethods\n\n    # Instantiate a new state machine for the including class by accepting a\n    # block with state and event (and subsequent transition) definitions.\n    def finity options = {}, &amp;block\n      @finity ||= Machine.new self, options, &amp;block\n    end\n\n    # Return the names of all registered states.\n    def states\n      @finity.states.map { |name, _| name }\n    end\n\n    # Return the names of all registered events.\n    def events\n      @finity.events.map { |name, _| name }\n    end\n  end\n\n  # Inject methods into the including class upon inclusion.\n  def self.included base\n    base.extend ClassMethods\n  end\nend\n</code></pre>"},{"location":"guide/codehilite/#xml","title":"XML","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]&gt;\n&lt;?oxygen RNGSchema=\"some.rng\" type=\"xml\"?&gt;\n&lt;xs:main-Tag xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;!-- This is a sample comment --&gt;\n  &lt;childTag attribute=\"Quoted Value\" another-attribute='Single quoted value'\n      a-third-attribute='123'&gt;\n    &lt;withTextContent&gt;Some text content&lt;/withTextContent&gt;\n    &lt;withEntityContent&gt;Some text content with &amp;lt;entities&amp;gt; and\n      mentioning uint8_t and int32_t&lt;/withEntityContent&gt;\n    &lt;otherTag attribute='Single quoted Value'/&gt;\n  &lt;/childTag&gt;\n  &lt;![CDATA[ some CData ]]&gt;\n&lt;/main-Tag&gt;\n</code></pre>"},{"location":"guide/footnotes/","title":"Footnotes","text":"<p>Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation.</p>"},{"location":"guide/footnotes/#installation","title":"Installation","text":"<p>Add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - footnotes\n</code></pre>"},{"location":"guide/footnotes/#usage","title":"Usage","text":"<p>The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document.</p>"},{"location":"guide/footnotes/#inserting-the-reference","title":"Inserting the reference","text":"<p>The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers.</p> <p>Example:</p> <pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n</code></pre> <p>Result:</p> <p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"guide/footnotes/#inserting-the-content","title":"Inserting the content","text":"<p>The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference.</p>"},{"location":"guide/footnotes/#on-a-single-line","title":"on a single line","text":"<p>Short statements can be written on the same line.</p> <p>Example:</p> <pre><code>[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> <p>Result:</p> <p>Jump to footnote at the bottom of the page</p>"},{"location":"guide/footnotes/#on-multiple-lines","title":"on multiple lines","text":"<p>Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces.</p> <p>Example:</p> <pre><code>[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> <p>Jump to footnote at the bottom of the page</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod   nulla. Curabitur feugiat, tortor non consequat finibus, justo purus   auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"guide/getting-started/","title":"Getting started","text":""},{"location":"guide/getting-started/#create-beautiful-project-documentation","title":"Create beautiful project documentation","text":"<p>Material is a theme for MkDocs, an excellent static site generator geared towards project documentation. It is built using Google's Material Design guidelines.</p>"},{"location":"guide/getting-started/#installation","title":"Installation","text":""},{"location":"guide/getting-started/#installing-mkdocs","title":"Installing MkDocs","text":"<p>Before installing MkDocs, you need to make sure you have Python and <code>pip</code> \u2013 the Python package manager \u2013 up and running. You can verify if you're already good to go with the following commands:</p> <pre><code>python --version\n# Python 3.8.0\npip --version\n# pip 19.3.1\n</code></pre> <p>Installing and verifying MkDocs is as simple as:</p> <pre><code>pip install mkdocs &amp;&amp; mkdocs --version\n# mkdocs, version 1.0.4\n</code></pre> <p>Material requires MkDocs &gt;= 1.0.0.</p>"},{"location":"guide/getting-started/#installing-material","title":"Installing Material","text":""},{"location":"guide/getting-started/#using-pip","title":"using pip","text":"<p>Material can be installed with <code>pip</code>:</p> <pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"guide/getting-started/#using-choco","title":"using choco","text":"<p>If you're on Windows you can use Chocolatey to install Material:</p> <pre><code>choco install mkdocs-material\n</code></pre> <p>This will install all required dependencies like Python and MkDocs.</p>"},{"location":"guide/getting-started/#cloning-from-github","title":"cloning from GitHub","text":"<p>Material can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>This is especially useful if you want to extend the theme and override some parts of the theme. The theme will reside in the folder <code>mkdocs-material/material</code>.</p>"},{"location":"guide/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>Installation on macOS</p> <p>When you're running the pre-installed version of Python on macOS, <code>pip</code> tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this:</p> <ol> <li> <p>Installing in user space (recommended): Provide the <code>--user</code> flag   to the install command and <code>pip</code> will install the package in a user-site   location. This is the recommended way.</p> </li> <li> <p>Switching to a homebrewed Python: Upgrade your Python installation   to a self-contained solution by installing Python with Homebrew. This   should eliminate a lot of problems you may be having with <code>pip</code>.</p> </li> </ol> <p>Error: unrecognized theme 'material'</p> <p>If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or <code>apt-get</code>) and the Material theme through <code>pip</code>, so both packages end up in different locations. MkDocs only checks its install location for themes.</p>"},{"location":"guide/getting-started/#alternative-using-docker","title":"Alternative: Using Docker","text":"<p>If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with:</p> <pre><code>docker pull squidfunk/mkdocs-material\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entrypoint, <code>serve</code> is the default command. Start the development server in your project root with:</p> <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n</code></pre> <p>If you're using Windows command prompt (<code>cmd.exe</code>), substitute <code>${PWD}</code> with <code>\"%cd%\"</code>.</p>"},{"location":"guide/getting-started/#usage","title":"Usage","text":"<p>In order to enable the theme just add one of the following lines to your project's <code>mkdocs.yml</code>. If you installed Material using a package manager:</p> <pre><code>theme:\n  name: 'material'\n</code></pre> <p>If you cloned Material from GitHub:</p> <pre><code>theme:\n  name: null\n  custom_dir: 'mkdocs-material/material'\n</code></pre> <p>MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.</p>"},{"location":"guide/getting-started/#configuration","title":"Configuration","text":""},{"location":"guide/getting-started/#color-palette","title":"Color palette","text":"<p>A default hue is defined for every primary and accent color on Google's Material Design color palette, which makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables:</p> <pre><code>theme:\n  palette:\n    primary: 'indigo'\n    accent: 'indigo'\n</code></pre> <p>Color names are case-insensitive, but must match the names of the Material Design color palette. Valid values are: <code>red</code>, <code>pink</code>, <code>purple</code>, <code>deep purple</code>, <code>indigo</code>, <code>blue</code>, <code>light blue</code>, <code>cyan</code>, <code>teal</code>, <code>green</code>, <code>light green</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>, <code>orange</code>, <code>deep orange</code>, <code>brown</code>, <code>grey</code>, <code>blue grey</code> and <code>white</code>. The last four colors can only be used as a primary color.</p> <p>If the color is set via this configuration, an additional CSS file that defines the color palette is automatically included. If you want to keep things lean, clone the repository and recompile the theme with your custom colors set. See the guide on customization for more information.</p>"},{"location":"guide/getting-started/#primary-colors","title":"Primary colors","text":"<p>Default: <code>indigo</code></p> <p>Click on a tile to change the primary color of the theme:</p> <p>Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey Black White</p>"},{"location":"guide/getting-started/#accent-colors","title":"Accent colors","text":"<p>Default: <code>indigo</code></p> <p>Click on a tile to change the accent color of the theme:</p> <p>Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange</p>"},{"location":"guide/getting-started/#font-family","title":"Font family","text":"<p>Default: <code>Roboto</code> and <code>Roboto Mono</code></p> <p>By default the Roboto font family is included with the theme, specifically the regular sans-serif type for text and the <code>monospaced</code> type for code. Both fonts are loaded from Google Fonts and can be changed to other fonts, like for example the Ubuntu font family:</p> <pre><code>theme:\n  font:\n    text: 'Ubuntu'\n    code: 'Ubuntu Mono'\n</code></pre> <p>The text font will be loaded in weights 400 and 700, the <code>monospaced</code> font in regular weight. If you want to load fonts from other destinations or don't want to use the Google Fonts loading magic, just set <code>font</code> to <code>false</code>:</p> <pre><code>theme:\n  font: false\n</code></pre>"},{"location":"guide/getting-started/#logo","title":"Logo","text":"<p>Default icon: <code>school</code></p> <p>Your logo should have rectangular shape with a minimum resolution of 128x128, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header bar and drawer. Simply create the folder <code>docs/images</code>, add your logo and embed it with:</p> <pre><code>theme:\n  logo: 'images/logo.svg'\n</code></pre> <p>Additionally, the default icon can be changed by setting an arbitrary ligature (or Unicode code point) from the Material Design icon font, e.g.</p> <pre><code>theme:\n  logo:\n    icon: 'cloud'\n</code></pre>"},{"location":"guide/getting-started/#language","title":"Language","text":"<p>Call for Contributions: Add languages/translations to Material</p> <p>Help translate Material into more languages - it's just one click and takes approximately 2 minutes: click here</p>"},{"location":"guide/getting-started/#localization","title":"Localization","text":"<p>Default: <code>en</code></p> <p>Material for MkDocs supports internationalization (i18n) and provides translations for all template variables and labels in the following languages:</p> Available languages <code>af</code> / Afrikaans <code>ar</code> / Arabic <code>ca</code> / Catalan <code>cs</code> / Czech <code>da</code> / Danish <code>nl</code> / Dutch <code>en</code> / English <code>et</code> / Estonian <code>fi</code> / Finnish <code>fr</code> / French <code>gl</code> / Galician <code>de</code> / German <code>gr</code> / Greek <code>he</code> / Hebrew <code>hi</code> / Hindi <code>hr</code> / Croatian <code>hu</code> / Hungarian <code>id</code> / Indonesian <code>it</code> / Italian <code>ja</code> / Japanese <code>kr</code> / Korean <code>no</code> / Norwegian <code>nn</code> / Norwegian (Nynorsk) <code>fa</code> / Persian <code>pl</code> / Polish <code>pt</code> / Portugese <code>ru</code> / Russian <code>sr</code> / Serbian <code>sh</code> / Serbo-Croatian <code>sk</code> / Slovak <code>si</code> / Slovenian <code>es</code> / Spanish <code>sv</code> / Swedish <code>th</code> / Thai <code>tr</code> / Turkish <code>uk</code> / Ukrainian <code>vi</code> / Vietnamese <code>zh</code> / Chinese (Simplified) <code>zh-Hant</code> / Chinese (Traditional) <code>zh-TW</code> / Chinese (Taiwanese) Submit a new language <p>Specify the language with:</p> <pre><code>theme:\n  language: 'en'\n</code></pre> <p>If the language is not specified, Material falls back to English. To create a translation for another language, copy the localization file of an existing language, name the new file using the 2-letter language code and adjust all translations:</p> <pre><code>cp partials/language/en.html partials/language/jp.html\n</code></pre>"},{"location":"guide/getting-started/#text-direction","title":"Text direction","text":"<p>Default: best match for given theme language, automatically set</p> <p>Material supports both, left-to-right (<code>ltr</code>) and right-to-left (<code>rtl</code>) text direction. This enables more languages like Arabic, Hebrew, Syriac and others to be used with the theme:</p> <pre><code>theme:\n  direction: 'rtl'\n</code></pre>"},{"location":"guide/getting-started/#site-search","title":"Site search","text":"<p>Default: best match for given theme language, automatically set</p> <p>Site search is implemented using lunr.js, which includes stemmers for the English language by default, while stemmers for other languages are included with lunr-languages, both of which are integrated with this theme. Material selects the matching (or best-matching) stemmer for the given theme language. Multilingual search can be activated in your project's <code>mkdocs.yml</code> by explicitly defining the search language(s):</p> <pre><code>extra:\n  search:\n    language: 'en, de, ru'\n</code></pre> <p>At the time of writing, the following languages are supported:</p> Available language stemmers <code>da</code> / Danish <code>du</code> / Dutch <code>en</code> / English <code>fi</code> / Finnish <code>fr</code> / French <code>de</code> / German <code>hu</code> / Hungarian <code>it</code> / Italian <code>ja</code> / Japanese <code>no</code> / Norwegian <code>pt</code> / Portugese <code>ro</code> / Romanian <code>ru</code> / Russian <code>es</code> / Spanish <code>sv</code> / Swedish <code>tr</code> / Turkish <p>MkDocs 1.0 compatibility</p> <p>While MkDocs 1.0 supports prebuilding the search index, Material currently doesn't support this setting as the default search behavior of the original theme was heavily modified for the sake of a better UX. Integration is possible, but a small subset of the features Material provides will not be portable to the prebuilt index mainly due to missing localization.</p> <p>Only specify the languages you really need</p> <p>Be aware that including support for other languages increases the general JavaScript payload by around 20kb (without gzip) and by another 15-30kb per language.</p> <p>The separator for tokenization can be customized which makes it possible to index parts of words that are separated by <code>-</code> or <code>.</code>:</p> <pre><code>extra:\n  search:\n    tokenizer: '[\\s\\-\\.]+'\n</code></pre>"},{"location":"guide/getting-started/#favicon","title":"Favicon","text":"<p>Default: <code>assets/images/favicon.png</code></p> <p>The default favicon can be changed by setting the <code>favicon</code> variable to an <code>.ico</code> or image file:</p> <pre><code>theme:\n  favicon: 'assets/images/favicon.ico'\n</code></pre>"},{"location":"guide/getting-started/#features","title":"Features","text":""},{"location":"guide/getting-started/#tabs","title":"Tabs","text":"<p>Default: <code>false</code></p> <p>By default, the entire navigation is rendered on the left side using collapsible sections (different from the default MkDocs theme which renders the top-level sections in the header), because horizontal navigation is often problematic on smaller screens. However, for large documentation projects it's sometimes desirable to add another navigation layer to separate top-level sections. Material achieves this with the tabs feature, which can be enabled by setting the respective feature flag to <code>true</code>:</p> <pre><code>theme:\n  feature:\n    tabs: true\n</code></pre> <p>When tabs are enabled, top-level sections will be rendered in an additional layer directly below the header. The navigation on the left side will only include the pages contained within the selected section. Furthermore, top-level pages defined inside your project's <code>mkdocs.yml</code> will be grouped under the first tab which will receive the title of the first page.</p>"},{"location":"guide/getting-started/#customization","title":"Customization","text":""},{"location":"guide/getting-started/#adding-a-source-repository","title":"Adding a source repository","text":"<p>To include a link to the repository of your project within your documentation, set the following variables via your project's <code>mkdocs.yml</code>:</p> <pre><code>repo_name: 'squidfunk/mkdocs-material'\nrepo_url: 'https://github.com/squidfunk/mkdocs-material'\n</code></pre> <p>The name of the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Furthermore, if <code>repo_url</code> points to a GitHub, BitBucket or GitLab repository, the respective service logo will be shown next to the name of the repository. Additionally, for GitHub, the number of stars and forks is shown.</p> <p>If the repository is hosted in a private environment, the service logo can be set explicitly by setting <code>extra.repo_icon</code> to <code>github</code>, <code>gitlab</code> or <code>bitbucket</code>.</p> <p>Why is there an edit button at the top of every article?</p> <p>If the <code>repo_url</code> is set to a GitHub or BitBucket repository, and the <code>repo_name</code> is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the <code>edit_uri</code> attribute, which defines whether the edit button is shown or not.</p>"},{"location":"guide/getting-started/#adding-social-links","title":"Adding social links","text":"<p>Social accounts can be linked in the footer of the documentation using the automatically included FontAwesome webfont. The <code>type</code> must denote the name of the social service, e.g. <code>github</code>, <code>twitter</code> or <code>linkedin</code> and the <code>link</code> must contain the URL you want to link to:</p> <pre><code>extra:\n  social:\n    - type: 'github'\n      link: 'https://github.com/squidfunk'\n    - type: 'twitter'\n      link: 'https://twitter.com/squidfunk'\n    - type: 'linkedin'\n      link: 'https://www.linkedin.com/in/squidfunk'\n</code></pre> <p>The links are generated in order and the <code>type</code> of the links must match the name of the FontAwesome glyph. The <code>fa</code> is automatically added, so <code>github</code> will result in <code>fa fa-github</code>.</p>"},{"location":"guide/getting-started/#adding-a-web-app-manifest","title":"Adding a Web App Manifest","text":"<p>A Web App Manifest is a simple JSON file that tells the browser about your web application and how it should behave when installed on the user's mobile device or desktop. You can specify a manifest in your <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  manifest: 'manifest.webmanifest'\n</code></pre>"},{"location":"guide/getting-started/#more-advanced-customization","title":"More advanced customization","text":"<p>If you want to change the general appearance of the Material theme, see   this article for more information on advanced customization.</p>"},{"location":"guide/getting-started/#integrations","title":"Integrations","text":""},{"location":"guide/getting-started/#google-analytics","title":"Google Analytics","text":"<p>MkDocs makes it easy to integrate site tracking with Google Analytics. Besides basic tracking, clicks on all outgoing links can be tracked as well as how site search is used. Tracking can be activated in your project's <code>mkdocs.yml</code>:</p> <pre><code>google_analytics:\n  - 'UA-XXXXXXXX-X'\n  - 'auto'\n</code></pre>"},{"location":"guide/getting-started/#disqus","title":"Disqus","text":"<p>Material for MkDocs is integrated with Disqus, so if you want to add a comments section to your documentation set the shortname of your Disqus project in your <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  disqus: 'your-shortname'\n</code></pre> <p>The comments section is inserted on every page, except the index page. Additionally, a new entry at the bottom of the table of contents is generated that is linking to the comments section. The necessary JavaScript is automatically included.</p> <p>Requirements</p> <p><code>site_url</code> value must be set in <code>mkdocs.yml</code> for the Disqus integration to load properly.</p> <p>Disqus can also be enabled or disabled for specific pages using Metadata.</p>"},{"location":"guide/getting-started/#extensions","title":"Extensions","text":"<p>MkDocs supports several Markdown extensions. The following extensions are not enabled by default (see the link for which are enabled by default) but highly recommended, so they should be switched on at all times:</p> <pre><code>markdown_extensions:\n  - admonition\n  - codehilite:\n      guess_lang: false\n  - toc:\n      permalink: true\n</code></pre> <p>For more information, see the following list of extensions supported by the Material theme including more information regarding installation and usage:</p> <ul> <li>Admonition</li> <li>Codehilite</li> <li>Footnotes</li> <li>Metadata</li> <li>Permalinks</li> <li>PyMdown Extensions</li> </ul>"},{"location":"guide/getting-started/#plugins","title":"Plugins","text":"<p>MkDocs's plugin architecture makes it possible to add pre- or post-processing steps that sit between the theme and your documentation. For more information, see the following list of plugins tested and supported by the Material theme including more information regarding installation and usage:</p> <ul> <li>Minify HTML</li> <li>Revision date</li> <li>Search</li> </ul> <p>The MkDocs wiki contains a list of all available plugins.</p> <p>Remember to re-add the <code>search</code> plugin</p> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin when adding additional plugins. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p>"},{"location":"guide/getting-started/#full-example","title":"Full example","text":"<p>Below is a full example configuration for a <code>mkdocs.yml</code>:</p> <pre><code># Project information\nsite_name: 'Material for MkDocs'\nsite_description: 'A Material Design theme for MkDocs'\nsite_author: 'Martin Donath'\nsite_url: 'https://squidfunk.github.io/mkdocs-material/'\n\n# Repository\nrepo_name: 'squidfunk/mkdocs-material'\nrepo_url: 'https://github.com/squidfunk/mkdocs-material'\n\n# Copyright\ncopyright: 'Copyright &amp;copy; 2016 - 2017 Martin Donath'\n\n# Configuration\ntheme:\n  name: 'material'\n  language: 'en'\n  palette:\n    primary: 'indigo'\n    accent: 'indigo'\n  font:\n    text: 'Roboto'\n    code: 'Roboto Mono'\n\n# Customization\nextra:\n  manifest: 'manifest.webmanifest'\n  social:\n    - type: 'github'\n      link: 'https://github.com/squidfunk'\n    - type: 'twitter'\n      link: 'https://twitter.com/squidfunk'\n    - type: 'linkedin'\n      link: 'https://www.linkedin.com/in/squidfunk'\n\n# Google Analytics\ngoogle_analytics:\n  - 'UA-XXXXXXXX-X'\n  - 'auto'\n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - codehilite:\n      guess_lang: false\n  - toc:\n      permalink: true\n</code></pre>"},{"location":"guide/markdown-specimen/","title":"Markdown Specimen","text":""},{"location":"guide/markdown-specimen/#body-copy","title":"Body copy","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex. Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor.</p> <p>Sed suscipit, orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. <code>Ut tincidunt sollicitudin</code> tincidunt. Aenean ullamcorper sit amet nulla at interdum.</p>"},{"location":"guide/markdown-specimen/#headings","title":"Headings","text":""},{"location":"guide/markdown-specimen/#the-3rd-level","title":"The 3rd level","text":""},{"location":"guide/markdown-specimen/#the-4th-level","title":"The 4th level","text":""},{"location":"guide/markdown-specimen/#the-5th-level","title":"The 5th level","text":""},{"location":"guide/markdown-specimen/#the-6th-level","title":"The 6th level","text":""},{"location":"guide/markdown-specimen/#headings-with-secondary-text","title":"Headings with secondary text","text":""},{"location":"guide/markdown-specimen/#the-3rd-level-with-secondary-text","title":"The 3rd level with secondary text","text":""},{"location":"guide/markdown-specimen/#the-4th-level-with-secondary-text","title":"The 4th level with secondary text","text":""},{"location":"guide/markdown-specimen/#the-5th-level-with-secondary-text","title":"The 5th level with secondary text","text":""},{"location":"guide/markdown-specimen/#the-6th-level-with-secondary-text","title":"The 6th level with secondary text","text":""},{"location":"guide/markdown-specimen/#blockquotes","title":"Blockquotes","text":"<p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.   Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc   mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad   litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie   imperdiet consectetur.</p>"},{"location":"guide/markdown-specimen/#blockquote-nesting","title":"Blockquote nesting","text":"<p>Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh, vitae   faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem   libero fermentum urna, ut efficitur elit ligula et nunc.</p> <p>Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla.     Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio.     Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum.     eu odio.</p> <p><code>Suspendisse rutrum facilisis risus</code>, eu posuere neque commodo a.       Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo       bibendum, sodales mauris ut, tincidunt massa.</p>"},{"location":"guide/markdown-specimen/#other-content-blocks","title":"Other content blocks","text":"<p>Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu   lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,   sit amet laoreet nibh.   <pre><code>var _extends = function(target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n</code></pre></p> <p>Praesent at <code>return target</code>, sodales nibh vel, tempor felis. Fusce       vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices.       Donec consectetur mauris non neque imperdiet, eget volutpat libero.</p>"},{"location":"guide/markdown-specimen/#lists","title":"Lists","text":""},{"location":"guide/markdown-specimen/#unordered-lists","title":"Unordered lists","text":"<ul> <li> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus   non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,   at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> <li> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut   eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam   ac, aliquet sed mauris.</p> </li> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> </li> </ul>"},{"location":"guide/markdown-specimen/#ordered-lists","title":"Ordered lists","text":"<ol> <li> <p>Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis   elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla   consectetur feugiat sodales.</p> </li> <li> <p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur   ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam   pellentesque lacinia eu vel odio.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet   quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a   ultricies libero efficitur sed.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet   rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed   aliquet, neque at rutrum mollis, neque nisi tincidunt nibh.</p> </li> <li> <p>Pellentesque eget <code>var _extends</code> ornare tellus, ut gravida mi. <pre><code>var _extends = function(target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n</code></pre></p> </li> </ol> </li> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis   sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis   nulla. Vivamus a pharetra leo.</p> </li> </ol>"},{"location":"guide/markdown-specimen/#definition-lists","title":"Definition lists","text":"Lorem ipsum dolor sit amet <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> Cras arcu libero <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.</p>"},{"location":"guide/markdown-specimen/#code-blocks","title":"Code blocks","text":""},{"location":"guide/markdown-specimen/#inline","title":"Inline","text":"<p>Morbi eget <code>dapibus felis</code>. Vivamus <code>venenatis porttitor</code> tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. <code>Pellentesque aliquet quam enim</code>, eu volutpat urna rutrum a.</p> <p>Nam vehicula nunc <code>return target</code> mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.</p>"},{"location":"guide/markdown-specimen/#listing","title":"Listing","text":"<pre><code>#!js hl_lines=\"8\"\nvar _extends = function(target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n</code></pre>"},{"location":"guide/markdown-specimen/#horizontal-rules","title":"Horizontal rules","text":"<p>Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <p>Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.</p>"},{"location":"guide/markdown-specimen/#data-tables","title":"Data tables","text":"Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.</p> Left Center Right Lorem dolor <code>amet</code> ipsum sit <p>Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh.</p> Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est."},{"location":"guide/metadata/","title":"Metadata","text":"<p>The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context.</p>"},{"location":"guide/metadata/#installation","title":"Installation","text":"<p>Add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - meta\n</code></pre>"},{"location":"guide/metadata/#usage","title":"Usage","text":"<p>Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme.</p> <p>Example:</p> <pre><code>title: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\npath: path/to/file\nsource: file.js\n\n# Headline\n\n...\n</code></pre> <p>See the next section which covers the metadata that is supported by Material.</p>"},{"location":"guide/metadata/#setting-a-hero-text","title":"Setting a hero text","text":"<p>Material exposes a simple text-only page-local hero via Metadata, as you can see on the current page when you scroll to the top. It's as simple as:</p> <pre><code>hero: Metadata enables hero teaser texts\n</code></pre>"},{"location":"guide/metadata/#linking-sources","title":"Linking sources","text":"<p>When a document is related to a specific set of source files and the <code>repo_url</code> is defined inside the project's <code>mkdocs.yml</code>, the files can be linked using the <code>source</code> key:</p> <pre><code>source: file.js\n</code></pre> <p>The filename is appended to the <code>repo_url</code> set in your <code>mkdocs.yml</code>, but can be prefixed with a <code>path</code> to ensure correct path resolving:</p> <p>Example:</p> <pre><code>path: tree/master/docs/extensions\nsource: metadata.md\n</code></pre> <p>Result:</p> <p>See the source section for the resulting output.</p>"},{"location":"guide/metadata/#redirecting-to-another-page","title":"Redirecting to another page","text":"<p>It's sometimes necessary to move documents around in the navigation tree and redirect user from the old URL to the new one. The <code>redirect</code> meta-tag allows to create a redirection from the current document to the address specified in the tag.</p> <p>For instance, if your document contains:</p> <pre><code>redirect: /new/url\n</code></pre> <p>accessing that document's URL will automatically redirect to <code>/new/url</code>.</p>"},{"location":"guide/metadata/#overrides","title":"Overrides","text":""},{"location":"guide/metadata/#page-title","title":"Page title","text":"<p>The page title can be overridden on a per-document level:</p> <pre><code>title: Lorem ipsum dolor sit amet\n</code></pre> <p>This will set the <code>title</code> tag inside the document <code>head</code> for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title.</p>"},{"location":"guide/metadata/#page-description","title":"Page description","text":"<p>The page description can also be overridden on a per-document level:</p> <pre><code>description: Nullam urna elit, malesuada eget finibus ut, ac tortor.\n</code></pre> <p>This will set the <code>meta</code> tag containing the site description inside the document <code>head</code> for the current page to the provided value.</p>"},{"location":"guide/metadata/#disqus","title":"Disqus","text":"<p>As described in the getting started guide, the Disqus comments section can be enabled on a per-document level:</p> <pre><code>disqus: your-shortname\n</code></pre> <p>Disqus can be disabled for a specific page by setting it to an empty value:</p> <pre><code>disqus:\n</code></pre>"},{"location":"guide/mkdocs-customization/","title":"Mkdocs Customization","text":""},{"location":"guide/mkdocs-customization/#a-great-starting-point","title":"A great starting point","text":"<p>Project documentation is as diverse as the projects themselves and the Material theme is a good starting point for making it look great. However, as you write your documentation, you may reach a point where some small adjustments are necessary to preserve the desired style.</p>"},{"location":"guide/mkdocs-customization/#adding-assets","title":"Adding assets","text":"<p>MkDocs provides several ways to interfere with themes. In order to make a few tweaks to an existing theme, you can just add your stylesheets and JavaScript files to the <code>docs</code> directory.</p>"},{"location":"guide/mkdocs-customization/#additional-stylesheets","title":"Additional stylesheets","text":"<p>If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in your <code>docs</code> directory:</p> <pre><code>mkdir docs/stylesheets\ntouch docs/stylesheets/extra.css\n</code></pre> <p>Then, add the following line to your <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n  - 'stylesheets/extra.css'\n</code></pre> <p>Spin up the development server with <code>mkdocs serve</code> and start typing your changes in your additional stylesheet file \u2013 you can see them instantly after saving, as the MkDocs development server implements live reloading.</p>"},{"location":"guide/mkdocs-customization/#additional-javascript","title":"Additional JavaScript","text":"<p>The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in your <code>docs</code> directory:</p> <pre><code>mkdir docs/javascripts\ntouch docs/javascripts/extra.js\n</code></pre> <p>Then, add the following line to your <code>mkdocs.yml</code>:</p> <pre><code>extra_javascript:\n  - 'javascripts/extra.js'\n</code></pre> <p>Further assistance can be found in the MkDocs documentation.</p>"},{"location":"guide/mkdocs-customization/#extending-the-theme","title":"Extending the theme","text":"<p>If you want to alter the HTML source (e.g. add or remove some part), you can extend the theme. From version 0.16 on MkDocs implements theme extension, an easy way to override parts of a theme without forking and changing the main theme.</p>"},{"location":"guide/mkdocs-customization/#setup-and-theme-structure","title":"Setup and theme structure","text":"<p>Reference the Material theme as usual in your <code>mkdocs.yml</code>, and create a new folder for overrides, e.g. <code>theme</code>, which you reference using <code>custom_dir</code>:</p> <pre><code>theme:\n  name: 'material'\n  custom_dir: 'theme'\n</code></pre> <p>Theme extension prerequisites</p> <p>As the <code>custom_dir</code> variable is used for the theme extension process, the Material theme needs to be installed via <code>pip</code> and referenced with the <code>name</code> parameter in your <code>mkdocs.yml</code>.</p> <p>The structure in the theme directory must mirror the directory structure of the original theme, as any file in the theme directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the theme directory.</p> <p>The directory layout of the Material theme is as follows:</p> <pre><code>.\n\u251c\u2500 assets/\n\u2502  \u251c\u2500 images/                          # Images and icons\n\u2502  \u251c\u2500 javascripts/                     # JavaScript\n\u2502  \u2514\u2500 stylesheets/                     # Stylesheets\n\u251c\u2500 partials/\n\u2502  \u251c\u2500 integrations/                    # 3rd-party integrations\n\u2502  \u251c\u2500 language/                        # Localized languages\n\u2502  \u251c\u2500 footer.html                      # Footer bar\n\u2502  \u251c\u2500 header.html                      # Header bar\n\u2502  \u251c\u2500 hero.html                        # Hero teaser\n\u2502  \u251c\u2500 language.html                    # Localized labels\n\u2502  \u251c\u2500 nav-item.html                    # Main navigation item\n\u2502  \u251c\u2500 nav.html                         # Main navigation\n\u2502  \u251c\u2500 search.html                      # Search box\n\u2502  \u251c\u2500 social.html                      # Social links\n\u2502  \u251c\u2500 source.html                      # Repository information\n\u2502  \u251c\u2500 tabs-item.html                   # Tabs navigation item\n\u2502  \u251c\u2500 tabs.html                        # Tabs navigation\n\u2502  \u251c\u2500 toc-item.html                    # Table of contents item\n\u2502  \u2514\u2500 toc.html                         # Table of contents\n\u251c\u2500 404.html                            # 404 error page\n\u251c\u2500 base.html                           # Base template\n\u2514\u2500 main.html                           # Default page\n</code></pre>"},{"location":"guide/mkdocs-customization/#overriding-partials","title":"Overriding partials","text":"<p>In order to override the footer, we can replace the <code>footer.html</code> partial with our own partial. To do this, create the file <code>partials/footer.html</code> in the theme directory. MkDocs will now use the new partial when rendering the theme. This can be done with any file.</p>"},{"location":"guide/mkdocs-customization/#overriding-template-blocks","title":"Overriding template blocks","text":"<p>Besides overriding partials, one can also override so called template blocks, which are defined inside the Material theme and wrap specific features. To override a template block, create a <code>main.html</code> inside the theme directory and define the block, e.g.:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block htmltitle %}\n  &lt;title&gt;Lorem ipsum dolor sit amet&lt;/title&gt;\n{% endblock %}\n</code></pre> <p>The Material theme provides the following template blocks:</p> Block name Wrapped contents <code>analytics</code> Wraps the Google Analytics integration <code>content</code> Wraps the main content <code>disqus</code> Wraps the disqus integration <code>extrahead</code> Empty block to define additional meta tags <code>fonts</code> Wraps the webfont definitions <code>footer</code> Wraps the footer with navigation and copyright <code>header</code> Wraps the fixed header bar <code>hero</code> Wraps the hero teaser <code>htmltitle</code> Wraps the <code>&lt;title&gt;</code> tag <code>libs</code> Wraps the JavaScript libraries, e.g. Modernizr <code>scripts</code> Wraps the JavaScript application logic <code>source</code> Wraps the linked source files <code>site_meta</code> Wraps the meta tags in the document head <code>site_nav</code> Wraps the site navigation and table of contents <code>styles</code> Wraps the stylesheets (also extra sources) <p>For more on this topic refer to the MkDocs documentation</p>"},{"location":"guide/mkdocs-customization/#theme-development","title":"Theme development","text":"<p>The Material theme uses Webpack as a build tool to leverage modern web technologies like Babel and SASS. If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the Material theme and recompile it. This is fairly easy.</p>"},{"location":"guide/mkdocs-customization/#environment-setup","title":"Environment setup","text":"<p>In order to start development on the Material theme, a Node.js version of at least 8 is required. First, clone the repository:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material\n</code></pre> <p>Next, all dependencies need to be installed, which is done with:</p> <p><pre><code>cd mkdocs-material\npip install -r requirements.txt\nnpm install\n</code></pre> If you're on Windows, you may also need to install GNU Make</p>"},{"location":"guide/mkdocs-customization/#development-mode","title":"Development mode","text":"<p>The development server can be started with:</p> <pre><code>npm run watch\n</code></pre> <p>This will also start the MkDocs development server which will monitor changes on assets, templates and documentation. Point your browser to localhost:8000 and you should see this documentation in front of you.</p> <p>For example, changing the color palette is as simple as changing the <code>$md-color-primary</code> and <code>$md-color-accent</code> variables in <code>src/assets/stylesheets/_config.scss</code>:</p> <pre><code>$md-color-primary: $clr-red-400;\n$md-color-accent:  $clr-teal-a700;\n</code></pre> <p>Automatically generated files</p> <p>Never make any changes in the <code>material</code> directory, as the contents of this directory are automatically generated from the <code>src</code> directory and will be overridden when the theme is built.</p>"},{"location":"guide/mkdocs-customization/#build-process","title":"Build process","text":"<p>When you've finished making your changes, you can build the theme by invoking:</p> <pre><code>npm run build\n</code></pre> <p>This triggers the production-level compilation and minification of all stylesheets and JavaScript sources. When the command exits, the final theme is located in the <code>material</code> directory. Add the <code>theme_dir</code> variable pointing to the aforementioned directory in your original <code>mkdocs.yml</code>.</p> <p>Now you can run <code>mkdocs build</code> and you should see your documentation with your changes to the original Material theme.</p>"},{"location":"guide/mkdocstrings/","title":"Mkdocstrings","text":""},{"location":"guide/mkdocstrings/#autodoc-syntax","title":"Autodoc syntax","text":"<p>mkdocstrings works by processing special expressions in your Markdown files.</p> <p>The syntax is as follows:</p> <pre><code>::: identifier\n    YAML block\n</code></pre> <p>Resources on YAML.</p> <p> YAML can sometimes be a bit tricky, particularly on indentation. Here are some resources that other users found useful to better understand YAML's peculiarities.</p> <ul> <li>YAML idiosyncrasies</li> <li>YAML multiline</li> </ul> <p>The <code>identifier</code> is a string identifying the object you want to document. The format of an identifier can vary from one handler to another. For example, the Python handler expects the full dotted-path to a Python object: <code>my_package.my_module.MyClass.my_method</code>.</p> <p>The YAML block is optional, and contains some configuration options:</p> <ul> <li><code>handler</code>: the name of the handler to use to collect and render this object.   By default, it will use the value defined in the Global options's   <code>default_handler</code> key, or <code>\"python\"</code>.</li> <li><code>options</code>: a dictionary of options passed to the handler's methods responsible both   for collecting and rendering the documentation. These options can be defined   globally (in <code>mkdocs.yml</code>, see Global options),    locally (as described here), or both. </li> </ul> <p>Example with the Python handler</p> docs/my_page.mdmkdocs.ymlsrc/my_package/my_module.pyResult <pre><code># Documentation for `MyClass`\n\n::: my_package.my_module.MyClass\n    handler: python\n    options:\n      members:\n        - method_a\n        - method_b\n      show_root_heading: false\n      show_source: false\n</code></pre> <pre><code>nav:\n  - \"My page\": my_page.md\n</code></pre> <pre><code>class MyClass:\n    \"\"\"Print print print!\"\"\"\n\n    def method_a(self):\n        \"\"\"Print A!\"\"\"\n        print(\"A!\")\n\n    def method_b(self):\n        \"\"\"Print B!\"\"\"\n        print(\"B!\")\n\n    def method_c(self):\n        \"\"\"Print C!\"\"\"\n        print(\"C!\")\n</code></pre> <p></p> <p>It is also possible to integrate a mkdocstrings identifier into a Markdown header:</p> <pre><code>## ::: my_package.my_module.MyClass\n    options:\n      show_source: false\n</code></pre> <p>The above is equivalent to:</p> <pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: false\n      heading_level: 2\n</code></pre>"},{"location":"guide/mkdocstrings/#documentation-for-myclass","title":"Documentation for <code>MyClass</code>","text":"<p>Print print print!</p>"},{"location":"guide/mkdocstrings/#mkdocstrings.my_module.MyClass.method_a","title":"<code> method_a(self) </code>","text":"<p>Print A!</p>"},{"location":"guide/mkdocstrings/#mkdocstrings.my_module.MyClass.method_b","title":"<code> method_b(self) </code>","text":"<p>Print B!</p>"},{"location":"guide/mkdocstrings/#global-options","title":"Global options","text":"<p>mkdocstrings accepts a few top-level configuration options in <code>mkdocs.yml</code>:</p> <ul> <li><code>default_handler</code>: The handler that is used by default when no handler is specified.</li> <li><code>custom_templates</code>: The path to a directory containing custom templates.   The path is relative to the MkDocs configuration file.   See Theming.</li> <li><code>handlers</code>: The handlers' global configuration.</li> <li><code>enable_inventory</code>: Whether to enable inventory file generation.   See Cross-references to other projects / inventories</li> <li><code>enabled</code> (New in version 0.20): Whether to enable the plugin. Defaults to <code>true</code>.   Can be used to reduce build times when doing local development.   Especially useful when used with environment variables (see example below).</li> </ul> <p>Example</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    enabled: !ENV [ENABLE_MKDOCSTRINGS, true]\n    custom_templates: templates\n    default_handler: python\n    handlers:\n      python:\n        options:\n          show_source: false\n</code></pre> <p>The handlers global configuration can then be overridden by local configurations:</p> docs/some_page.md<pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: true\n</code></pre> <p>Some handlers accept additional global configuration. Check the documentation for your handler of interest in Handlers.</p>"},{"location":"guide/mkdocstrings/#cross-references","title":"Cross-references","text":"<p>Cross-references are written as Markdown reference-style links:</p> MarkdownHTML Result <pre><code>With a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n</code></pre> <pre><code>&lt;p&gt;With a custom title:\n&lt;a href=\"https://example.com/page1#full.path.object1\"&gt;&lt;code&gt;Object 1&lt;/code&gt;&lt;/a&gt;&lt;p&gt;\n&lt;p&gt;With the identifier as title:\n&lt;a href=\"https://example.com/page2#full.path.object2\"&gt;full.path.object2&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>Any item that was inserted using the autodoc syntax (e.g. <code>full.path.object1</code>) is possible to link to by using the same identifier with the cross-reference syntax (<code>[example][full.path.object1]</code>). But the cross-references are also applicable to the items' children that get pulled in.</p>"},{"location":"guide/mkdocstrings/#finding-out-the-anchor","title":"Finding out the anchor","text":"<p>If you're not sure which exact identifier a doc item uses, you can look at its \"anchor\", which your Web browser will show in the URL bar when clicking an item's entry in the table of contents. If the URL is <code>https://example.com/some/page.html#full.path.object1</code> then you know that this item is possible to link to with <code>[example][full.path.object1]</code>, regardless of the current page.</p>"},{"location":"guide/mkdocstrings/#cross-references-to-any-markdown-heading","title":"Cross-references to any Markdown heading","text":"<p>Changed in version 0.15.</p> <p>Linking to any Markdown heading used to be the default, but now opt-in is required.</p> <p>If you want to link to any Markdown heading, not just mkdocstrings-inserted items, please enable the autorefs plugin for MkDocs by adding <code>autorefs</code> to <code>plugins</code>:</p> mkdocs.yml<pre><code>plugins:\n- search\n- autorefs\n- mkdocstrings:\n    [...]\n</code></pre> <p>Note that you don't need to (<code>pip</code>) install anything more; this plugin is guaranteed to be pulled in with mkdocstrings.</p> <p>Example</p> doc1.mddoc2.mdResult HTML for doc2 <pre><code>## Hello, world!\n\nTesting\n</code></pre> <pre><code>## Something else\n\nPlease see the [Hello, World!][hello-world] section.\n</code></pre> <pre><code>&lt;p&gt;Please see the &lt;a href=\"doc1.html#hello-world\"&gt;Hello, World!&lt;/a&gt; section.&lt;/p&gt;\n</code></pre>"},{"location":"guide/mkdocstrings/#cross-references-to-a-sub-heading-in-a-docstring","title":"Cross-references to a sub-heading in a docstring","text":"<p>New in version 0.14.</p> <p>If you have a Markdown heading inside your docstring, you can also link directly to it. In the example below you see the identifier to be linked is <code>foo.bar--tips</code>, because it's the \"Tips\" heading that's part of the <code>foo.bar</code> object, joined with \"<code>--</code>\".</p> <p>Example</p> foo.pydoc1.mddoc2.mdHTML result for doc2 <pre><code>def bar():\n    \"\"\"Hello, world!\n\n    # Tips\n\n    - Stay hydrated.\n    \"\"\"\n</code></pre> <pre><code>::: foo.bar\n</code></pre> <pre><code>Check out the [tips][foo.bar--tips]\n</code></pre> <pre><code>&lt;p&gt;Check out the &lt;a href=\"doc1.html#foo.bar--tips\"&gt;tips&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>The above tip about Finding out the anchor also applies the same way here.</p> <p>You may also notice that such a heading does not get rendered as a <code>&lt;h1&gt;</code> element directly, but rather the level gets shifted to fit the encompassing document structure. If you're curious about the implementation, check out mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor and others.</p>"},{"location":"guide/mkdocstrings/#cross-references-to-other-projects-inventories","title":"Cross-references to other projects / inventories","text":"<p>New in version 0.16.</p> <p>Python developers coming from Sphinx might know about its <code>intersphinx</code> extension, that allows to cross-reference items between several projects. mkdocstrings has a similar feature.</p> <p>To reference an item from another project, you must first tell mkdocstrings to load the inventory it provides. Each handler will be responsible of loading inventories specific to its language. For example, the Python handler can load Sphinx-generated inventories (<code>objects.inv</code>).</p> <p>In the following snippet, we load the inventory provided by <code>installer</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - https://installer.readthedocs.io/en/stable/objects.inv\n</code></pre> <p>Now it is possible to cross-reference <code>installer</code>'s items. For example:</p> MarkdownResult (HTML)Result (displayed) <pre><code>See [installer.records][] to learn about records.\n</code></pre> <pre><code>&lt;p&gt;See &lt;a href=\"https://installer.readthedocs.io/en/stable/api/records/#module-installer.records\"&gt;installer.records&lt;/a&gt;\nto learn about records.&lt;/p&gt;\n</code></pre> <p>See installer.records to learn about records.</p> <p>You can of course select another version of the inventory, for example:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        # latest instead of stable\n        - https://installer.readthedocs.io/en/latest/objects.inv\n</code></pre> <p>In case the inventory file is not served under the base documentation URL, you can explicitly specify both URLs:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - url: https://cdn.example.com/version/objects.inv\n          base_url: https://docs.example.com/version\n</code></pre> <p>Absolute URLs to cross-referenced items will then be based on <code>https://docs.example.com/version/</code> instead of <code>https://cdn.example.com/version/</code>.</p> <p>Reciprocally, mkdocstrings also allows to generate an inventory file in the Sphinx format. It will be enabled by default if the Python handler is used, and generated as <code>objects.inv</code> in the final site directory. Other projects will be able to cross-reference items from your project.</p> <p>To explicitly enable or disable the generation of the inventory file, use the global <code>enable_inventory</code> option:</p> <pre><code>plugins:\n- mkdocstrings:\n    enable_inventory: false\n</code></pre>"},{"location":"guide/permalinks/","title":"Permalinks","text":"<p>Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document.</p>"},{"location":"guide/permalinks/#installation","title":"Installation","text":"<p>To enable permalinks, add the following to your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: true\n</code></pre> <p>This will add a link containing the paragraph symbol <code>\u00b6</code> at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: Link\n</code></pre>"},{"location":"guide/permalinks/#usage","title":"Usage","text":"<p>When enabled, permalinks are inserted automatically.</p>"},{"location":"guide/pymdown/","title":"PyMdown Extensions","text":"<p>PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.</p>"},{"location":"guide/pymdown/#installation","title":"Installation","text":"<p>The PyMdown Extensions package can be installed with the following command:</p> <pre><code>pip install pymdown-extensions\n</code></pre> <p>The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme:</p> <pre><code>markdown_extensions:\n  - pymdownx.arithmatex\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n</code></pre>"},{"location":"guide/pymdown/#usage","title":"Usage","text":""},{"location":"guide/pymdown/#arithmatex-mathjax","title":"Arithmatex MathJax","text":"<p>Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax.</p> <p>Besides activating the extension in the <code>mkdocs.yml</code>, the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript:</p> <pre><code>extra_javascript:\n  - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'\n</code></pre> <p>If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in <code>extra_javascript</code> which contains your MathJax configuration, e.g.:</p> <pre><code>window.MathJax = {\n  tex2jax: {\n    inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n    displayMath: [ [\"\\\\[\",\"\\\\]\"] ]\n  },\n  TeX: {\n    TagSide: \"right\",\n    TagIndent: \".8em\",\n    MultLineWidth: \"85%\",\n    equationNumbers: {\n      autoNumber: \"AMS\",\n    },\n    unicode: {\n      fonts: \"STIXGeneral,'Arial Unicode MS'\"\n    }\n  },\n  displayAlign: \"left\",\n  showProcessingMessages: false,\n  messageStyle: \"none\"\n};\n</code></pre> <p>In your <code>mkdocs.yml</code>, include it with:</p> <pre><code>extra_javascript:\n  - 'javascripts/extra.js'\n  - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'\n</code></pre>"},{"location":"guide/pymdown/#blocks","title":"Blocks","text":"<p>Blocks are enclosed in <code>$$...$$</code> which are placed on separate lines.</p> <p>Example:</p> <pre><code>$$\n\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n$$\n</code></pre> <p>Result:</p> <p>$$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$</p>"},{"location":"guide/pymdown/#inline","title":"Inline","text":"<p>Inline equations need to be enclosed in <code>$...$</code>:</p> <p>Example:</p> <pre><code>Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$\n</code></pre> <p>Result:</p> <p>Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$</p>"},{"location":"guide/pymdown/#betterem","title":"BetterEm","text":"<p>BetterEm improves the handling of emphasis markup (bold and italic) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes.</p>"},{"location":"guide/pymdown/#caret","title":"Caret","text":"<p>Caret makes it possible to highlight ^^inserted text^^. The portion of text that should be marked as added must be enclosed in two carets <code>^^...^^</code>.</p>"},{"location":"guide/pymdown/#critic","title":"Critic","text":"<p>Critic implements Critic Markup, a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected.</p> <p>Text can be {--deleted--} and replacement text {++added++}. This can also be combined into {~~one~&gt;a single~~} operation. {==Highlighting==} is also possible {&gt;&gt;and comments can be added inline&lt;&lt;}.</p> <p>{==</p> <p>Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p>==}</p>"},{"location":"guide/pymdown/#details","title":"Details","text":"<p>Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 <code>details</code> and <code>summary</code> tags. Additionally, all Admonition qualifiers can be used, e.g. <code>note</code>, <code>question</code>, <code>warning</code> etc.:</p> How many Prolog programmers does it take to change a lightbulb? <p>Yes.</p>"},{"location":"guide/pymdown/#emoji","title":"Emoji","text":"<p>Emoji adds the ability to insert a -load of emojis that we use in our daily lives.</p> <p>By default, Emoji uses JoyPixles' emoji under the former name EmojiOne. Recent versions of the extension lock support to an older version (2.2.7) due to JoyPixels' newer, less permissible licenses included in later releases. This restricts support to Unicode 9. To get the latest support for the current Unicode version, you can use Twemoji instead which has a much more permissable license. Simply override the default emoji index being used:</p> <pre><code>markdown_extensions:\n  - pymdownx.emoji:\n      emoji_index: !!python/name:pymdownx.emoji.twemoji\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n</code></pre> <p>To view all the available short names and emoji available, see Emoji's documentation on your chosen index which includes links to the files containing the short names and emoji associated with each supported index. Happy scrolling .</p> <p>Legal disclaimer</p> <p>Material has no affiliation with JoyPixles or Twemoji, both of which use releases that are under CC BY 4.0. When including images or CSS from either provider, please read the the respective licenses: EmojiOne or Twemoji to ensure proper usage and attribution.</p>"},{"location":"guide/pymdown/#inlinehilite","title":"InlineHilite","text":"<p>InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. <code>var test = 0;</code> and can be achieved by prefixing inline code with a shebang and language identifier, e.g. <code>#!js</code>.</p>"},{"location":"guide/pymdown/#magiclink","title":"MagicLink","text":"<p>MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links <code>http[s]://</code> and <code>ftp://</code> links, as well as references to email addresses.</p>"},{"location":"guide/pymdown/#mark","title":"Mark","text":"<p>Mark adds the ability to ==highlight text== like it was marked with a ==text marker==. The portion of text that should be highlighted must be enclosed in two equal signs <code>==...==</code>.</p>"},{"location":"guide/pymdown/#smartsymbols","title":"SmartSymbols","text":"<p>SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows (&lt;--, --&gt;, &lt;--&gt;), trademark and copyright symbols ((c), (tm), (r)) and fractions (1/2, 1/4, ...).</p>"},{"location":"guide/pymdown/#superfences","title":"SuperFences","text":"<p>SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly.</p> <p>SuperFences does also allow grouping code blocks with tabs.</p>"},{"location":"guide/pymdown/#tasklist","title":"Tasklist","text":"<p>Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with <code>[ ]</code> for empty or <code>[x]</code> for filled checkboxes.</p> <p>Example:</p> <pre><code>* [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n</code></pre> <p>Result:</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Nulla lobortis egestas semper</li> <li> Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Sed egestas felis quis elit dapibus, ac aliquet turpis mattis</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> <li> Nulla vel eros venenatis, imperdiet enim id, faucibus nisi</li> </ul>"},{"location":"guide/pymdown/#tilde","title":"Tilde","text":"<p>Tilde provides an easy way to ~~strike through~~ cross out\u00a0text. The portion of text that should be erased must be enclosed in two tildes <code>~~...~~</code> and the extension will take care of the rest.</p>"},{"location":"guide/revision-date/","title":"Revision date","text":"<p>mkdocs-git-revision-date-localized-plugin is an extension that shows the date on which a Markdown file was last updated in Git at the bottom of each page. The date is extracted at the time of the build, so <code>mkdocs build</code> must be triggered from within a Git repository.</p>"},{"location":"guide/revision-date/#installation","title":"Installation","text":"<p>Install the plugin using <code>pip</code> with the following command:</p> <pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Next, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - git-revision-date-localized\n</code></pre> <p>Remember to re-add the <code>search</code> plugin</p> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p>"},{"location":"guide/revision-date/#usage","title":"Usage","text":"<p>The date is automatically added at the bottom of each page, e.g.:</p> <pre><code>Last updated: 9 December, 2019\n</code></pre>"},{"location":"guide/revision-date/#changing-the-language","title":"Changing the language","text":"<p>The date is printed according to the locale which is determined through the theme language that was set in <code>mkdocs.yml</code>.</p>"},{"location":"guide/revision-date/#changing-the-format","title":"Changing the format","text":"<p>To change the date format, set the <code>type</code> parameter to one of <code>date</code>, <code>datetime</code>, <code>iso_date</code>, <code>iso_datetime</code> or <code>timeago</code>, i.e.:</p> <pre><code>28 November, 2019                  # type: date\n28 November, 2019 13:57:28         # type: datetime\n2019-11-28                         # type: iso_date\n2019-11-28 13:57:26                # type: iso_datetime\n20 hours ago                       # type: timeago\n</code></pre> <p>Example:</p> <pre><code>plugins:\n  - git-revision-date-localized:\n      type: timeago\n</code></pre> <p>Result:</p> <pre><code>20 hours ago\n</code></pre>"},{"location":"guide/revision-date/#other-plugins-that-use-information-from-git","title":"Other plugins that use information from git","text":"<ul> <li>mkdocs-git-authors-plugin for displaying the authors from git</li> <li>mkdocs-git-committers-plugin for displaying authors' github user profiles</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/markdown/","title":"markdown","text":""},{"location":"blog/category/mkdocs/","title":"mkdocs","text":""},{"location":"blog/category/mkdocstrings/","title":"mkdocstrings","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"blog/category/python/","title":"Python","text":""}]}